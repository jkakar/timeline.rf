module Timeline.test

import (
    "Testing"

    "github.com/jkakar/timeline.rf/Timeline"
)

func TestSquashIsANoopWhenNoneOfTheTimeslinesOverlap(c Testing.C) {
    //     1    2    3    4    5
    // ... R1===R1 ...............>
    // ............. R2===R2 .....>
    //     >- 1 -<   >- 1 -<
    timelines = list[Timeline.Range]{Timeline.Range{1, 2}, Timeline.Range{3, 4}}
    Testing.AssertMatch(c, Timeline.Squash(timelines), timelines)
}

func TestSquashSquashesTwoTimelinesThatPartiallyOverlapIntoASingleTimeline(c Testing.C) {
    //     1    2    3    4    5
    // ... R1========R1 ..........>
    // ........ R2========R2 .....>
    //     >------ 3 ------<
    timelines = list[Timeline.Range]{Timeline.Range{1, 3}, Timeline.Range{2, 4}}
    squashedTimelines = list[Timeline.Range]{Timeline.Range{1, 4}}
    Testing.AssertMatch(c, Timeline.Squash(timelines), squashedTimelines)
}

func TestSquashSquashesMultipleOverlappingTimelinesIntoADistinctListOfTimelines(c Testing.C) {
    //     1    2    3    4    5    6    7    8    9    10   11   12
    // ... R1==================R1 ....................................>
    // ........ R2========R2 .........................................>
    // ............................ R3===R3 ..........................>
    // ............................ R4========R4 .....................>
    // ........................................... R5========R5 ......>
    // ................................................ R6===R6 ......>
    //     >--------- 4 --------<   >---- 2 ---<   >---- 2 ---<
    timelines = list[Timeline.Range]{
        Timeline.Range{1, 5},
        Timeline.Range{2, 4},
        Timeline.Range{6, 7},
        Timeline.Range{6, 8},
        Timeline.Range{9, 11},
        Timeline.Range{10, 11},
    }
    squashedTimelines = list[Timeline.Range]{
        Timeline.Range{1, 5},
        Timeline.Range{6, 8},
        Timeline.Range{9, 11},
    }
    Testing.AssertMatch(c, Timeline.Squash(timelines), squashedTimelines)
}
